/*
 * Copyright (c) 2024 Allister MacLeod
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#include "zmk-helpers/helper.h"
#include "zmk-helpers/key-labels/34.h"

#include <behaviors/num_word.dtsi>

// Zaphod Lite keymap.

// Refactoring thougts:
// - should reuse stuff among Corne, Lily58, and Zaphod Lite
// - some stuff is different, like I want to use more taps and fewer holds on Zaphod
// - combos are fairly keyboard specific, though some of them may stay the same within the 34-key footprint
// - macros seem like a good refactoring candidate
// - for example, the Qu macro is useful across all three boards
// - keeping the symbol and navigation layers consistent would be good
// - gotta adapt a 34-key layout to 58, 36, and 34
// - doing urob's periphery trick with the X_FOO defines could work

// TO-DO list:
// - "smart" semi-layers: smart nav stays in arrows and nav until non-nav pressed, for example
// - other smarts: numeric, caps

#define DEFAULT 0
#define HDNEU   0
#define SYM     1
#define NAV     2
#define NUM     3
#define KEEBCTL 4

// These includes (well, just glam-util) need to be after the layer
// defines, specifically the one for KEEBCTL.
#include "glam-multigraph.dtsi"
#include "glam-util.dtsi"

// Placeholder for unused parameters.
#define UNUSED 0

//   0   1   2   3   4       5   6   7   8   9
//  10  11  12  13  14      15  16  17  18  19
//  20  21  22  23  24      25  26  27  28  29
//              30  31    32  33

// LT4 LT3 LT2 LT1 LT0     RT0 RT1 RT2 RT3 RT4
// LM4 LM3 LM2 LM1 LM0     RM0 RM1 RM2 RM3 RM4
// LB4 LB3 LB2 LB1 LB0     RB0 RB1 RB2 RB3 RB4
//              LH1 LH0   RH0 RH1

// Key groups for cross-hand hold trigger definitions.
#define KEYS_LEFT  LT4 LT3 LT2 LT1 LT0  LM4 LM3 LM2 LM1 LM0  LB4 LB3 LB2 LB1 LB0
#define KEYS_RIGHT RT0 RT1 RT2 RT3 RT4  RM0 RM1 RM2 RM3 RM4  RB0 RB1 RB2 RB3 RB4
#define KEYS_THUMB LH1 LH0  RH0 RH1

/ {
combos {
  compatible = "zmk,combos";
  // Upper left two keys for Z in Hands Down.
  combo_northwest_zed {
    timeout-ms = <50>;
    key-positions = <LT4 LT3>;
    bindings = <&kp Z>;
    layers = <HDNEU>;
  };
  // Combo U and Y to produce Qu in Hands Down.
  combo_uy_qu {
    timeout-ms = <50>;
    key-positions = <RB1 RB3>;
    bindings = <&squ>;
    layers = <HDNEU>;
  };
  // Combo U, O, and Y to produce bare Q in Hands Down.
  combo_uoy_q {
    timeout-ms = <50>;
    key-positions = <RB1 RB2 RB3>;
    bindings = <&kp Q>;
    layers = <HDNEU>;
  };
  // Combos for H digraphs in Hands Down.
  combo_sn_sh {
    timeout-ms = <50>;
    key-positions = <LM3 LM2>;
    bindings = <&sdh S>;
    layers = <HDNEU>;
  };
  combo_st_ch {
    timeout-ms = <50>;
    key-positions = <LM3 LM1>;
    bindings = <&sdh C>;
    layers = <HDNEU>;
  };
  combo_nt_th {
    timeout-ms = <50>;
    key-positions = <LM2 LM1>;
    bindings = <&sdh T>;
    layers = <HDNEU>;
  };
  combo_fp_wh {
    timeout-ms = <50>;
    key-positions = <LT3 LT1>;
    bindings = <&sdh W>;
    layers = <HDNEU>;
  };
  combo_pm_ph {
    timeout-ms = <50>;
    key-positions = <LT2 LT1>;
    bindings = <&sdh P>;
    layers = <HDNEU>;
  };
  combo_dg_gh {
    timeout-ms = <50>;
    key-positions = <LB1 LB0>;
    bindings = <&sdh G>;
    layers = <HDNEU>;
  };
  // Combos for trigraphs and 3-letter consonant clusters.
  combo_rsn_sch {
    timeout-ms = <50>;
    key-positions = <LM4 LM3 LM2>;
    bindings = <&stch S>;
    layers = <HDNEU>;
  };
  combo_snt_tch {
    timeout-ms = <50>;
    key-positions = <LM3 LM2 LM1>;
    bindings = <&stch T>;
    layers = <HDNEU>;
  };
  combo_ldg_ght {
    timeout-ms = <50>;
    key-positions = <LB2 LB1 LB0>;
    bindings = <&sght>;
    layers = <HDNEU>;
  };
  // Chord combos for modifiers and special keys:
  // Left pinky and ring in middle row for LCtrl.
  combo_leftmost_ctrl {
    timeout-ms = <50>;
    key-positions = <LM4 LM3>;
    bindings = <&kp LCTRL>;
  };
  // Left pinky and ring in bottom row for LShift.
  combo_southwest_shift {
    timeout-ms = <50>;
    key-positions = <LB4 LB3>;
    bindings = <&kp LSHFT>;
  };
  // Right pinky and ring in bottom row for RShift.
  combo_southeast_shift {
    timeout-ms = <50>;
    key-positions = <RB3 RB4>;
    bindings = <&kp RSHFT>;
  };
  // Left pinky and index in middle row for Esc.
  combo_left_fork_escape {
    timeout-ms = <50>;
    key-positions = <LM4 LM1>;
    bindings = <&kp ESCAPE>;
  };
  // Right pinky and ring in top row for Backspace.
  combo_northeast_backspace {
    timeout-ms = <50>;
    key-positions = <RT3 RT4>;
    bindings = <&kp BACKSPACE>;
  };
  // Right pinky and ring in middle row for Enter.
  combo_rightmost_enter {
    timeout-ms = <50>;
    key-positions = <RM3 RM4>;
    bindings = <&kp ENTER>;
  };
  // All four thumb keys for keyboard control layer.
  combo_thumbs_keyboard_control {
    timeout-ms = <50>;
    key-positions = <LH1 LH0 RH0 RH1>;
    bindings = <&tog KEEBCTL>;
  };
  // Right hand index and ring fingers for BT_CLR_ALL but only on KEEBCTL layer.
  combo_bt_clear_all {
    timeout-ms = <50>;
    key-positions = <RB1 RB2>;
    bindings = <&btclall>;
    layers = <KEEBCTL>;
  };
  // Top and bottom keys on both innermost columns to enter flashing
  // mode.
  combo_bootsel {
    timeout-ms = <50>;
    key-positions = <LT0 LB0 RT0 RB0>;
    bindings = <&bootloader>;
  };
};

macros {
};

behaviors {
  // Symbol morphs for non-conventional shifting.
  hash_at: morph_octothorpe_amphora {
    compatible = "zmk,behavior-mod-morph";
    #binding-cells = <0>;
    bindings = <&kp HASH>, <&kp AT>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
  };
  dot_cln: morph_period_colon {
    compatible = "zmk,behavior-mod-morph";
    #binding-cells = <0>;
    bindings = <&kp DOT>, <&kp COLON>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
  };
  sqt_bang: morph_apostrophe_exclamation {
    compatible = "zmk,behavior-mod-morph";
    #binding-cells = <0>;
    bindings = <&kp SQT>, <&kp EXCL>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
  };
  dqt_ques: morph_quote_question {
    compatible = "zmk,behavior-mod-morph";
    #binding-cells = <0>;
    bindings = <&kp DQT>, <&kp QMARK>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
  };
  com_semi: morph_comma_semicolon {
    compatible = "zmk,behavior-mod-morph";
    #binding-cells = <0>;
    bindings = <&kp COMMA>, <&kp SEMICOLON>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
  };
  slashes: morph_slash_backslash {
    compatible = "zmk,behavior-mod-morph";
    #binding-cells = <0>;
    bindings = <&kp SLASH>, <&kp BACKSLASH>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
  };
  // Morph space into backspace when shift is held.
  spc_bks: morph_space_backspace {
    compatible = "zmk,behavior-mod-morph";
    #binding-cells = <0>;
    bindings = <&kp SPACE>, <&kp BACKSPACE>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
  };
  // Morph for smart-shift inspired by urob.
  smart_shift: morph_smart_shift {
    compatible = "zmk,behavior-mod-morph";
    #binding-cells = <0>;
    bindings = <&sk LSHIFT>, <&caps_word>;
    mods = <(MOD_LSFT)>;
  };
};

keymap {
  compatible = "zmk,keymap";
  hands_down_neu_layer {
// Hands Down Neu with punctuation moved a bit to match my habits.
// Q and Z exist only in combos.
// ,-----------------------------.   ,-----------------------------.
// |  W  |  F  |  M  |  P  |  V  |   | # @ | . : | ' ! | " ? |  J  |
// |  R  |  S  |  N  |  T  |  B  |   | , ; |  A  |  E  |  I  |  H  |
// |  X  |  C  |  L  |  D  |  G  |   |  -  |  U  |  O  |  Y  |  K  |
// `-----------------|Layer|Shift|   | Spc | Bks |-----------------'
    bindings = <
&kp W &kp F &kp M &kp P &kp V        &hash_at  &dot_cln &sqt_bang &dqt_ques &kp J
&kp R &kp S &kp N &kp T &kp B        &com_semi &kp A    &kp E     &kp I     &kp H
&kp X &kp C &kp L &kp D &kp G        &kp MINUS &kp U    &kp O     &kp Y     &kp K
           &sl SYM &smart_shift    &spc_bks &lt NAV BACKSPACE
    >;
    display-name = "HDNeu";
  };
  symbols_layer {
// ,-----------------------------.   ,-----------------------------.
// |  `  |  <  |  >  |  "  |  '  |   |  &  |  :  |  [  |  ]  |  _  |
// |  !  |  -  |  +  |  =  |  #  |   |  |  |  ;  |  {  |  }  |  ?  |
// |  ~  |  /  |  *  |  %  |  @  |   |  ^  |  $  |  (  |  )  | / \ |
// `-----------------|Layer|Shift|   |Base |NavLk|-----------------'
    bindings = <
&kp GRAVE &kp LT    &kp GT   &kp DQT     &kp SQT      &kp AMPS  &kp COLON  &kp LBKT &kp RBKT &kp UNDER
&kp EXCL  &kp MINUS &kp PLUS &kp EQUAL   &kp HASH     &kp PIPE  &kp SEMI   &kp LBRC &kp RBRC &kp QMARK
&kp TILDE &kp SLASH &kp STAR &kp PERCENT &kp AT       &kp CARET &kp DOLLAR &kp LPAR &kp RPAR &slashes
                               &sl NAV &kp LSHIFT    &tog SYM &num_word NUM
    >;
    display-name = "SYM";
  };
  navigation_layer {
// ,-----------------------------.   ,-----------------------------.
// | ^Q  | ^W  | ^E  | ^R  | ^T  |   | Home| PgD |  Up | PgU | Bks |
// | ^A  | ^S  | ^D  | ^F  | ^G  |   | End | Left| Down|Right| Ret |
// | ^Z  | ^X  | ^C  | ^V  | Del |   | GUI | Ctrl|Shift| Alt | Tab |
// `-----------------|Layer|     |   |Base |SymLk|-----------------'
    bindings = <
&kp LC(Q) &kp LC(W) &kp LC(E) &kp LC(R) &kp LC(T)   &kp HOME &kp PG_DN &kp UP     &kp PG_UP &kp BSPC
&kp LC(A) &kp LC(S) &kp LC(D) &kp LC(F) &kp LC(G)   &kp END  &kp LEFT  &kp DOWN   &kp RIGHT &kp RET
&kp LC(Z) &kp LC(X) &kp LC(C) &kp LC(V) &kp DEL     &sk RGUI &sk RCTRL &sk RSHIFT &sk LALT  &kp TAB
                                &none &trans       &tog NAV &to SYM
    >;
    display-name = "NAV";
  };
  numeric_layer {
// ,-----------------------------.   ,-----------------------------.
// |     |     |     |     |     |   |  *  |  7  |  8  |  9  |  -  |
// |     |     |     |     |     |   |  /  |  4  |  5  |  6  |  +  |
// |     |     |     |     |     |   | . : |  1  |  2  |  3  | Ent |
// `-----------------|     |     |   |Base |  0  |-----------------'
    bindings = <
&trans &trans &trans &trans &trans     &kp STAR  &kp N7 &kp N8 &kp N9 &kp MINUS
&kp N  &trans &trans &trans &trans     &kp SLASH &kp N4 &kp N5 &kp N6 &kp PLUS
&trans &trans &trans &trans &trans     &dot_cln  &kp N1 &kp N2 &kp N3 &kp ENTER
                      &trans &trans   &tog NUM &kp N0
    >;
    display-name = "NUM";
  };
  keyboard_control_layer {
// Bluetooth clear-all on right hand index and ring finger combo.
// ,-----------------------------.   ,-----------------------------.
// |     |     |     |     |     |   |     |     |     |     |     |
// |     |     |     |     |     |   |     |     |     |     |     |
// | BT1 | BT2 | BT3 | BT4 | BT5 |   |ClCur| Clear All |     |
// `-----------------|     |     |   |Base |     |-----------------'
    bindings = <
&trans &trans &trans &trans &trans                &trans &trans &trans &trans &trans
&trans &trans &trans &trans &trans                &trans &trans &trans &trans &trans
&btsel 0 &btsel 1 &btsel 2 &btsel 3 &btsel 4      &btcc &trans &trans &trans &trans
                                &trans &trans   &tog KEEBCTL &trans
    >;
    display-name = "KBDCTL";
  };
};
};

// ,-----------------------------.   ,-----------------------------.
// |     |     |     |     |     |   |     |     |     |     |     |
// |     |     |     |     |     |   |     |     |     |     |     |
// |     |     |     |     |     |   |     |     |     |     |     |
// `-----------------|     |     |   |     |     |-----------------'
