/*
 * Copyright (c) 2024 Allister MacLeod
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#include "zmk-helpers/helper.h"
#include "zmk-helpers/key-labels/34.h"

// Zaphod Lite keymap.

// Refactoring thougts:
// - should reuse stuff among Corne, Lily58, and Zaphod Lite
// - some stuff is different, like I want to use more taps and fewer holds on Zaphod
// - combos are fairly keyboard specific, though some of them may stay the same within the 34-key footprint
// - macros seem like a good refactoring candidate
// - for example, the Qu macro is useful across all three boards
// - keeping the symbol and navigation layers consistent would be good
// - gotta adapt a 34-key layout to 58, 36, and 34
// - doing urob's periphery trick with the X_FOO defines could work

// Stuff to try:
// - switch to Hands Down Neu; I think I prefer having S on LM3, and freeing a thumb key for mods/layers/etc. might be more useful than R on thumb
// - finish making the mod-morphs for shifted punctuation in HDNEU layer
// - fix combos to match Hands Down Neu letter placement
// - "smart" semi-layers: smart nav stays in arrows and nav until non-nav pressed, for example
// - other smarts: numeric, caps

#define DEFAULT 0
#define HDNEU   0
#define SYM     1
#define NAV     2
#define NUMPAD  3
#define KEEBCTL 4

// Placeholder for unused parameters.
#define UNUSED 0

//   0   1   2   3   4       5   6   7   8   9
//  10  11  12  13  14      15  16  17  18  19
//  20  21  22  23  24      25  26  27  28  29
//              30  31    32  33

// LT4 LT3 LT2 LT1 LT0     RT0 RT1 RT2 RT3 RT4
// LM4 LM3 LM2 LM1 LM0     RM0 RM1 RM2 RM3 RM4
// LB4 LB3 LB2 LB1 LB0     RB0 RB1 RB2 RB3 RB4
//              LH1 LH0   RH0 RH1

// Key groups for cross-hand hold trigger definitions.
#define KEYS_LEFT  LT4 LT3 LT2 LT1 LT0  LM4 LM3 LM2 LM1 LM0  LB4 LB3 LB2 LB1 LB0
#define KEYS_RIGHT RT0 RT1 RT2 RT3 RT4  RM0 RM1 RM2 RM3 RM4  RB0 RB1 RB2 RB3 RB4
#define KEYS_THUMB LH1 LH0  RH0 RH1

/ {
combos {
  compatible = "zmk,combos";
  // Upper left two keys for Z in Hands Down.
  combo_northwest_zed {
    timeout-ms = <50>;
    key-positions = <LT4 LT3>;
    bindings = <&kp Z>;
    layers = <HDNEU>;
  };
  // Combo U and Y to produce Qu in Hands Down.
  combo_uy_qu {
    timeout-ms = <50>;
    key-positions = <RB1 RB3>;
    bindings = <&squ>;
    layers = <HDNEU>;
  };
  // Combo U, O, and Y to produce bare Q in Hands Down.
  combo_uoy_q {
    timeout-ms = <50>;
    key-positions = <RB1 RB2 RB3>;
    bindings = <&kp Q>;
    layers = <HDNEU>;
  };
  // Combos for H digraphs in Hands Down.
  combo_sn_sh {
    timeout-ms = <50>;
    key-positions = <LM3 LM2>;
    bindings = <&sdh S>;
    layers = <HDNEU>;
  };
  combo_st_ch {
    timeout-ms = <50>;
    key-positions = <LM3 LM1>;
    bindings = <&sdh C>;
    layers = <HDNEU>;
  };
  combo_nt_th {
    timeout-ms = <50>;
    key-positions = <LM2 LM1>;
    bindings = <&sdh T>;
    layers = <HDNEU>;
  };
  combo_fp_wh {
    timeout-ms = <50>;
    key-positions = <LT3 LT1>;
    bindings = <&sdh W>;
    layers = <HDNEU>;
  };
  combo_pm_ph {
    timeout-ms = <50>;
    key-positions = <LT2 LT1>;
    bindings = <&sdh P>;
    layers = <HDNEU>;
  };
  combo_dg_gh {
    timeout-ms = <50>;
    key-positions = <LB1 LB0>;
    bindings = <&sdh G>;
    layers = <HDNEU>;
  };
  // Combos for trigraphs and 3-letter consonant clusters.
  combo_rsn_sch {
    timeout-ms = <50>;
    key-positions = <LM4 LM3 LM2>;
    bindings = <&stch S>;
    layers = <HDNEU>;
  };
  combo_snt_tch {
    timeout-ms = <50>;
    key-positions = <LM3 LM2 LM1>;
    bindings = <&stch T>;
    layers = <HDNEU>;
  };
  combo_ldg_ght {
    timeout-ms = <50>;
    key-positions = <LB2 LB1 LB0>;
    bindings = <&sght>;
    layers = <HDNEU>;
  };
  // Chord combos for modifiers and special keys:
  // Left pinky and ring in middle row for LCtrl.
  combo_leftmost_ctrl {
    timeout-ms = <50>;
    key-positions = <LM4 LM3>;
    bindings = <&kp LCTRL>;
  };
  // Left pinky and ring in bottom row for LShift.
  combo_southwest_shift {
    timeout-ms = <50>;
    key-positions = <LB4 LB3>;
    bindings = <&kp LSHFT>;
  };
  // Left pinky and index in middle row for Esc.
  combo_left_fork_escape {
    timeout-ms = <50>;
    key-positions = <LM4 LM1>;
    bindings = <&kp ESCAPE>;
  };
  // Right pinky and ring in top row for Backspace.
  combo_northeast_backspace {
    timeout-ms = <50>;
    key-positions = <RT3 RT4>;
    bindings = <&kp BACKSPACE>;
  };
  // Right pinky and ring in middle row for Enter.
  combo_rightmost_enter {
    timeout-ms = <50>;
    key-positions = <RM3 RM4>;
    bindings = <&kp ENTER>;
  };
  // All four thumb keys for keyboard control layer.
  combo_thumbs_keyboard_control {
    timeout-ms = <50>;
    key-positions = <LH1 LH0 RH0 RH1>;
    bindings = <&sll KEEBCTL>;
  };
  // Right hand index and ring fingers for BT_CLR_ALL but only on KEEBCTL layer.
  combo_midright_bt_clear_all {
    timeout-ms = <50>;
    key-positions = <RM1 RM2>;
    bindings = <&bt BT_CLR_ALL>;
    layers = <KEEBCTL>;
  };
  // Top and bottom keys on both innermost columns to enter flashing
  // mode.
  combo_bootsel {
    timeout-ms = <50>;
    key-positions = <LT0 LB0 RT0 RB0>;
    bindings = <&bootloader>;
  };
};

macros {
  // Type "qu" with unshifted U. This variant is a straightforward
  // two-tap macro that can be used pretty much anywhere, including as
  // the tap or the hold of a hold-tap.
  squ: sequence_q_lower_u_simple {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    tap-ms = <30>;
    wait-ms = <10>;
    bindings = <&kp Q &weeu>;
  };
  // Type a digraph whose second letter is to be lowercase
  // regardless of shift. Note that this will remove shift even if
  // it is physically held beyond the end of the macro.
  sdh: sequence_digraph_h {
    compatible = "zmk,behavior-macro-one-param";
    #binding-cells = <1>;
    bindings
      = <&macro_param_1to1>
      , <&kp MACRO_PLACEHOLDER>
      , <&weeh>
      ;
  };
  // Type a -ch trigraph such as Sch or Tch. The macro parameter is
  // the first letter. The subsequent letters will be unshifted.
  stch: sequence_trigraph_ch {
    compatible = "zmk,behavior-macro-one-param";
    #binding-cells = <1>;
    bindings
      = <&macro_param_1to1>
      , <&kp MACRO_PLACEHOLDER>
      , <&weec &weeh>
      ;
  };
  sght: sequence_cluster_ght {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp G &weeh &weet>;
  };
};

behaviors {
  // Morph for Qu pair. Conveniently this guards it from regular
  // shift, but not from caps-word.
  weeu: morph_small_u {
    compatible = "zmk,behavior-mod-morph";
    #binding-cells = <0>;
    bindings = <&kp U>, <&kp U>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
  };
  weec: morph_small_c {
    compatible = "zmk,behavior-mod-morph";
    #binding-cells = <0>;
    bindings = <&kp C>, <&kp C>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
  };
  weeh: morph_small_h {
    compatible = "zmk,behavior-mod-morph";
    #binding-cells = <0>;
    bindings = <&kp H>, <&kp H>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
  };
  weet: morph_small_t {
    compatible = "zmk,behavior-mod-morph";
    #binding-cells = <0>;
    bindings = <&kp T>, <&kp T>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
  };
  // Symbol morphs for non-conventional shifting.
  hash_at: morph_octothorpe_amphora {
    compatible = "zmk,behavior-mod-morph";
    #binding-cells = <0>;
    bindings = <&kp HASH>, <&kp AT>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
  };
  // Long duration sticky layer.
  sll: sticky_layer_long {
    compatible = "zmk,behavior-sticky-key";
    #binding-cells = <1>;
    release-after-ms = <8000>;
    bindings = <&mo>;
    quick-release;
  };
};

keymap {
  compatible = "zmk,keymap";
  hands_down_neu_layer {
// Hands Down Neu with punctuation moved a bit to match my habits.
// Q and Z exist only in combos.
// ,-----------------------------.   ,-----------------------------.
// |  W  |  F  |  M  |  P  |  V  |   | # @ | . : | ' ! | " ? |  J  |
// |  R  |  S  |  N  |  T  |  B  |   | , ; |  A  |  E  |  I  |  H  |
// |  X  |  C  |  L  |  D  |  G  |   |  -  |  U  |  O  |  Y  |  K  |
// `-----------------|Layer|Shift|   | Spc | Bks |-----------------'
    bindings = <
&kp W &kp F &kp M &kp P &kp V        &hash_at  &kp DOT &kp SQT &kp DQT &kp J
&kp R &kp S &kp N &kp T &kp B        &kp COMMA &kp A   &kp E   &kp I   &kp H
&kp X &kp C &kp L &kp D &kp G        &kp MINUS &kp U   &kp O   &kp Y   &kp K
             &sl SYM &kp LSHIFT    &kp SPACE &kp BACKSPACE
    >;
    display-name = "HDNeu";
  };
  symbols_layer {
// ,-----------------------------.   ,-----------------------------.
// |  `  |  <  |  >  |  "  |  '  |   |  &  |  :  |  [  |  ]  |  _  |
// |  !  |  -  |  +  |  =  |  #  |   |  |  |  ;  |  {  |  }  |  ?  |
// |  ~  |  /  |  *  |  %  |  @  |   |  ^  |  $  |  (  |  )  | / \ |
// `-----------------|Layer|Shift|   |Base |     |-----------------'
    bindings = <
&kp GRAVE &kp LT &kp GT &kp DQT &kp SQT   &kp AMPS &kp COLON &kp LBKT &kp RBKT &kp UNDER
&kp EXCL &kp MINUS &kp PLUS &kp EQUAL &kp HASH   &kp PIPE &kp SEMI &kp LBRC &kp RBRC &kp QMARK
&kp TILDE &kp SLASH &kp STAR &kp PERCENT &kp AT   &kp CARET &kp DOLLAR &kp LPAR &kp RPAR &kp SLASH
                     &sl NAV &kp LSHIFT  &tog SYM &to NAV
    >;
    display-name = "SYM";
  };
  navigation_layer {
// ,-----------------------------.   ,-----------------------------.
// |     |     |     |     |     |   |     |     |     |     |     |
// |     |     |     |     |     |   |     |     |     |     |     |
// |     |     |     |     |     |   |     |     |     |     |     |
// `-----------------|     |     |   |Base |     |-----------------'
    bindings = <
&trans &trans &trans &trans &trans   &trans &trans &trans &trans &trans
&kp V  &trans &trans &trans &trans   &trans &trans &trans &trans &trans
&trans &trans &trans &trans &trans   &trans &trans &trans &trans &trans
                  &sl NUMPAD &trans &tog NAV &to SYM
    >;
    display-name = "NAV";
  };
  numeric_layer {
// ,-----------------------------.   ,-----------------------------.
// |     |     |     |     |     |   |     |     |     |     |     |
// |     |     |     |     |     |   |     |     |     |     |     |
// |     |     |     |     |     |   |     |     |     |     |     |
// `-----------------|     |     |   |Base |     |-----------------'
    bindings = <
&trans &trans &trans &trans &trans   &trans &trans &trans &trans &trans
&kp N  &trans &trans &trans &trans   &trans &trans &trans &trans &trans
&trans &trans &trans &trans &trans   &trans &trans &trans &trans &trans
                      &trans &trans &tog NUMPAD &trans
    >;
    display-name = "NUM";
  };
  keyboard_control_layer {
// Bluetooth clear-all on right hand index and ring finger combo.
// ,-----------------------------.   ,-----------------------------.
// |     |     |     |     |     |   |     |     |     |     |     |
// | BT1 | BT2 | BT3 | BT4 | BT5 |   | Clr |  Clr-All  |     |     |
// |     |     |     |     |     |   |     |     |     |     |     |
// `-----------------|     |     |   |     |     |-----------------'
    bindings = <
&trans &trans &trans &trans &trans                                 &trans &trans &trans &trans &trans
&bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4   &bt BT_CLR &trans &trans &trans &trans
&trans &trans &trans &trans &trans                                 &trans &trans &trans &trans &trans
                                                 &trans &trans   &trans &trans
    >;
    display-name = "KBDCTL";
  };
};
};

// ,-----------------------------.   ,-----------------------------.
// |     |     |     |     |     |   |     |     |     |     |     |
// |     |     |     |     |     |   |     |     |     |     |     |
// |     |     |     |     |     |   |     |     |     |     |     |
// `-----------------|     |     |   |     |     |-----------------'
