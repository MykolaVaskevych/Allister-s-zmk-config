/*
 * Copyright (c) 2024 Allister MacLeod
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#include "zmk-helpers/helper.h"
#include "zmk-helpers/key-labels/34.h"

// Zaphod Lite keymap.

// Refactoring thougts:
// - should reuse stuff among Corne, Lily58, and Zaphod Lite
// - some stuff is different, like I want to use more taps and fewer holds on Zaphod
// - combos are fairly keyboard specific, though some of them may stay the same within the 34-key footprint
// - macros seem like a good refactoring candidate
// - for example, the Qu macro is useful across all three boards
// - keeping the symbol and navigation layers consistent would be good
// - gotta adapt a 34-key layout to 58, 36, and 34
// - doing urob's periphery trick with the X_FOO defines could work

#define DEFAULT 0
#define HD_VIBR 0
#define SYM     1
#define NAV     2
#define NUMPAD  3
#define KEEBCTL 4

// Placeholder for unused parameters.
#define UNUSED 0

//   0   1   2   3   4       5   6   7   8   9
//  10  11  12  13  14      15  16  17  18  19
//  20  21  22  23  24      25  26  27  28  29
//              30  31    32  33

// LT4 LT3 LT2 LT1 LT0     RT0 RT1 RT2 RT3 RT4
// LM4 LM3 LM2 LM1 LM0     RM0 RM1 RM2 RM3 RM4
// LB4 LB3 LB2 LB1 LB0     RB0 RB1 RB2 RB3 RB4
//              LH1 LH0   RH0 RH1

// Key groups for cross-hand hold trigger definitions.
#define KEYS_LEFT  LT4 LT3 LT2 LT1 LT0  LM4 LM3 LM2 LM1 LM0  LB4 LB3 LB2 LB1 LB0
#define KEYS_RIGHT RT0 RT1 RT2 RT3 RT4  RM0 RM1 RM2 RM3 RM4  RB0 RB1 RB2 RB3 RB4
#define KEYS_THUMB LH1 LH0  RH0 RH1

/ {
combos {
  compatible = "zmk,combos";
  // Upper left two keys for Z in Hands Down.
  combo_northwest_zed {
    timeout-ms = <50>;
    key-positions = <LT4 LT3>;
    bindings = <&kp Z>;
    layers = <HD_VIBR>;
  };
  // Combo U and Y to produce Qu in Hands Down.
  combo_uy_qu {
    timeout-ms = <50>;
    key-positions = <RB1 RB3>;
    bindings = <&squ>;
    layers = <HD_VIBR>;
  };
  // Combo U, O, and Y to produce bare Q in Hands Down.
  combo_uoy_q {
    timeout-ms = <50>;
    key-positions = <RB1 RB2 RB3>;
    bindings = <&kp Q>;
    layers = <HD_VIBR>;
  };
  // Combos for H digraphs in Hands Down.
  combo_sc_sh {
    timeout-ms = <50>;
    key-positions = <LM4 LM3>;
    bindings = <&sdh S>;
    layers = <HD_VIBR>;
  };
  combo_cn_ch {
    timeout-ms = <50>;
    key-positions = <LM3 LM2>;
    bindings = <&sdh C>;
    layers = <HD_VIBR>;
  };
  combo_nt_th {
    timeout-ms = <50>;
    key-positions = <LM2 LM1>;
    bindings = <&sdh T>;
    layers = <HD_VIBR>;
  };
  combo_wm_wh {
    timeout-ms = <50>;
    key-positions = <LT3 LT2>;
    bindings = <&sdh W>;
    layers = <HD_VIBR>;
  };
  combo_mg_gh {
    timeout-ms = <50>;
    key-positions = <LT2 LT1>;
    bindings = <&sdh G>;
    layers = <HD_VIBR>;
  };
  combo_pl_ph {
    timeout-ms = <50>;
    key-positions = <LB3 LB2>;
    bindings = <&sdh P>;
    layers = <HD_VIBR>;
  };
  // Combos for trigraphs and 3-letter consonant clusters.
  combo_scn_sch {
    timeout-ms = <50>;
    key-positions = <LM4 LM3 LM2>;
    bindings = <&stch S>;
    layers = <HD_VIBR>;
  };
  combo_cnt_sch {
    timeout-ms = <50>;
    key-positions = <LM3 LM2 LM1>;
    bindings = <&stch T>;
    layers = <HD_VIBR>;
  };
  combo_wmg_ght {
    timeout-ms = <50>;
    key-positions = <LT3 LT2 LT1>;
    bindings = <&sght>;
    layers = <HD_VIBR>;
  };
  // Top and bottom keys on both innermost columns to enter flashing
  // mode.
  combo_bootsel {
    timeout-ms = <50>;
    key-positions = <LT0 LB0 RT0 RB0>;
    bindings = <&bootloader>;
  };
};

macros {
  // Type "qu" with unshifted U. This variant is a straightforward
  // two-tap macro that can be used pretty much anywhere, including as
  // the tap or the hold of a hold-tap.
  squ: sequence_q_lower_u_simple {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    tap-ms = <30>;
    wait-ms = <10>;
    bindings = <&kp Q &weeu>;
  };
  // Type a digraph whose second letter is to be lowercase
  // regardless of shift. Note that this will remove shift even if
  // it is physically held beyond the end of the macro.
  sdh: sequence_digraph_h {
    compatible = "zmk,behavior-macro-one-param";
    #binding-cells = <1>;
    bindings
      = <&macro_param_1to1>
      , <&kp MACRO_PLACEHOLDER>
      , <&weeh>
      ;
  };
  // Type a -ch trigraph such as Sch or Tch. The macro parameter is
  // the first letter. The subsequent letters will be unshifted.
  stch: sequence_trigraph_ch {
    compatible = "zmk,behavior-macro-one-param";
    #binding-cells = <1>;
    bindings
      = <&macro_param_1to1>
      , <&kp MACRO_PLACEHOLDER>
      , <&weec &weeh>
      ;
  };
  sght: sequence_cluster_ght {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp G &weeh &weet>;
  };
};

behaviors {
  // Morph for Qu pair. Conveniently this guards it from regular
  // shift, but not from caps-word.
  weeu: morph_small_u {
    compatible = "zmk,behavior-mod-morph";
    #binding-cells = <0>;
    bindings = <&kp U>, <&kp U>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
  };
  weec: morph_small_c {
    compatible = "zmk,behavior-mod-morph";
    #binding-cells = <0>;
    bindings = <&kp C>, <&kp C>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
  };
  weeh: morph_small_h {
    compatible = "zmk,behavior-mod-morph";
    #binding-cells = <0>;
    bindings = <&kp H>, <&kp H>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
  };
  weet: morph_small_t {
    compatible = "zmk,behavior-mod-morph";
    #binding-cells = <0>;
    bindings = <&kp T>, <&kp T>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
  };
};

keymap {
  compatible = "zmk,keymap";
  hands_down_vibranium_layer {
// Vibranium f (Neu-vf) with punctuation moved a bit to match my habits.
// Q and Z exist only in combos.
// ,-----------------------------.   ,-----------------------------.
// |  X  |  W  |  M  |  G  |  J  |   | # @ | . : | ' ! | " ? | / \ |
// |  S  |  C  |  N  |  T  |  K  |   | , ; |  A  |  E  |  I  |  H  |
// |  F  |  P  |  L  |  D  |  V  |   |  -  |  U  |  O  |  Y  |  B  |
// `-----------------|Layer|  R  |   | Spc | Bks |-----------------'
    bindings = <
&kp X &kp W &kp M &kp G &kp J        &kp HASH  &kp DOT &kp SQT &kp DQT &kp FSLH
&kp S &kp C &kp N &kp T &kp K        &kp COMMA &kp A   &kp E   &kp I   &kp H
&kp F &kp P &kp L &kp D &kp V        &kp MINUS &kp U   &kp O   &kp Y   &kp B
                  &sl SYM &kp R    &mt LSHIFT SPACE &kp BACKSPACE
    >;
    display-name = "HDVibr";
  };
  symbols_layer {
// ,-----------------------------.   ,-----------------------------.
// |     |     |     |     |     |   |     |     |     |     |     |
// |     |     |     |     |     |   |     |     |     |     |     |
// |     |     |     |     |     |   |     |     |     |     |     |
// `-----------------|Layer|     |   |Base |     |-----------------'
    bindings = <
&trans &trans &trans &trans &trans   &trans &trans &trans &trans &trans
&kp Y  &trans &trans &trans &trans   &trans &trans &trans &trans &trans
&trans &trans &trans &trans &trans   &trans &trans &trans &trans &trans
                     &sl NAV &trans &tog SYM &trans
    >;
    display-name = "SYM";
  };
  navigation_layer {
// ,-----------------------------.   ,-----------------------------.
// |     |     |     |     |     |   |     |     |     |     |     |
// |     |     |     |     |     |   |     |     |     |     |     |
// |     |     |     |     |     |   |     |     |     |     |     |
// `-----------------|     |     |   |Base |     |-----------------'
    bindings = <
&trans &trans &trans &trans &trans   &trans &trans &trans &trans &trans
&kp V  &trans &trans &trans &trans   &trans &trans &trans &trans &trans
&trans &trans &trans &trans &trans   &trans &trans &trans &trans &trans
                  &sl NUMPAD &trans &tog NAV &trans
    >;
    display-name = "NAV";
  };
  numeric_layer {
// ,-----------------------------.   ,-----------------------------.
// |     |     |     |     |     |   |     |     |     |     |     |
// |     |     |     |     |     |   |     |     |     |     |     |
// |     |     |     |     |     |   |     |     |     |     |     |
// `-----------------|     |     |   |Base |     |-----------------'
    bindings = <
&trans &trans &trans &trans &trans   &trans &trans &trans &trans &trans
&kp N  &trans &trans &trans &trans   &trans &trans &trans &trans &trans
&trans &trans &trans &trans &trans   &trans &trans &trans &trans &trans
                      &trans &trans &tog NUMPAD &trans
    >;
    display-name = "NUM";
  };
  keyboard_control_layer {
// ,-----------------------------.   ,-----------------------------.
// |     |     |     |     |     |   |     |     |     |     |     |
// |     |     |     |     |     |   |     |     |     |     |     |
// |     |     |     |     |     |   |     |     |     |     |     |
// `-----------------|     |     |   |     |     |-----------------'
    bindings = <
&trans &trans &trans &trans &trans   &trans &trans &trans &trans &trans
&trans &trans &trans &trans &trans   &trans &trans &trans &trans &trans
&trans &trans &trans &trans &trans   &trans &trans &trans &trans &trans
                      &trans &trans &trans &trans
    >;
    display-name = "KBDCTL";
  };
};
};

// ,-----------------------------.   ,-----------------------------.
// |     |     |     |     |     |   |     |     |     |     |     |
// |     |     |     |     |     |   |     |     |     |     |     |
// |     |     |     |     |     |   |     |     |     |     |     |
// `-----------------|     |     |   |     |     |-----------------'
