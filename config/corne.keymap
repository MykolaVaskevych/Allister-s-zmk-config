/*
 * Copyright (c) 2024 Allister MacLeod
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#include "zmk-helpers/helper.h"
#include "zmk-helpers/key-labels/36.h"


// Things to try next:
// - better handling of adaptive keys in Hands Down Gold;
//    maybe tap-dance is not the best way to handle Z and Q
// - Mac-friendly shortcuts either on nav layer or another layer
//   (but if possible keep it easy to do Emacs commands)
// - alt-tab shortcut, Callum-style if possible (virtually hold Alt
//   for successive "next window" presses)
// - split things out into includable dtsi files (but with what sort
//   of organization scheme?)
//   - identify commonalities between Corne keymap and Lily58 keymap
// - Emacs-specific macro keys: C-space, maybe others
// - change shifting of , and . in Hands Down Neu; could do ; and :
//   or ? and !
// - reclaim Q and Z keys for symbols in Hands Down Neu, since I type
//   Q and Z exclusively with combos now
// - add common i3wm(Regolith, actually) shortcuts like GUI-enter for
//   terminal, GUI-space for launcher, and GUI-shift-enter for web


#define DEFAULT 0
#define HD_NEU  0
#define HD_GOLD 1
#define DVORAK  2
#define COLEMAK 3
#define QWERTY  4
#define CANARY  5
#define STURDY  6
#define SYM     7
#define NAV     8
#define NUMPAD  9
#define NUMLOCK 10
#define I3WMNAV 11
#define KEEBCTL 12

// Placeholder for mandatory parameters that are never used.
#define UNUSED 0

// Home row mods settings; history notes below:
// - fast tapping term of 100 feels too fast
// - in Dvorak, al roll sometimes comes out as L, and so roll as O, also as as S
// - maybe Callum-style sticky mods are the way to go after all?
#define HM_TAPPING_TERM 200
#define HM_TAPPING_TERM_FAST 175
#define HM_PRIOR_IDLE 125
#define HM_QUICK_TAP 150

// Linger keys settings. When choosing a hold time, subtract the macro
// tap time from the actual desired hold time. For example if the linger
// should activate after 150ms and the macro tap time is 30ms, then the
// hold time for the actual hold-tap behavior should be 120ms. Wait
// time may come into play if the macro taps multiple keys.
// Use the short hold time for hold-taps inside macros with previous
// taps, and the long hold time for hold-taps that stand alone.
#define LINGER_MACRO_TAP_MS 30
#define LINGER_MACRO_WAIT_MS 10
#define LINGER_HOLD_SHORT_MS 120
#define LINGER_HOLD_LONG_MS 180

// Adaptive keys settings.
#define ADAPTIVE_KEYS_TAPPING_TERM 175

// Layer tap settings. If I linger on a layer tap longer than a couple
// of seconds, I probably was aiming for the hold and changed my mind,
// rather than wanting to actually tap. I might realistically still
// want a tap after one second, though.
#define LAYERTAP_HOLD_MS 1500

//  0  1  2  3  4      5  6  7  8  9
// 10 11 12 13 14     15 16 17 18 19
// 20 21 22 23 24     25 26 27 28 29
//        30 31 32   33 34 35

// Key groups for cross-hand hold trigger definitions.
#define KEYS_LEFT  0 1 2 3 4  10 11 12 13 14  20 21 22 23 24
#define KEYS_RIGHT 5 6 7 8 9  15 16 17 18 19  25 26 27 28 29
#define KEYS_THUMB 30 31 32  33 34 35

/ {
chosen { zmk,matrix_transform = &five_column_transform; };

combos {
  compatible = "zmk,combos";
  // Both main thumb keys to trigger caps word.
  combo_caps_word {
    timeout-ms = <50>;
    key-positions = <32 33>;
    bindings = <&caps_word>;
  };
  // Both outer thumb keys trigger the keyboard control layer (layout
  //  selection and Bluetooth).
  combo_meta_layer {
    timeout-ms = <50>;
    key-positions = <30 35>;
    bindings = <&slx KEEBCTL>;
  };
  // Upper left two keys for Z in both Hands Down layers.
  combo_northwest_zed {
    timeout-ms = <50>;
    key-positions = <0 1>;
    bindings = <&kp Z>;
    layers = <HD_NEU HD_GOLD>;
  };
  // Combo U and Y to produce Qu, only on Hands Down Neu.
  combo_uy_qu {
    timeout-ms = <50>;
    key-positions = <26 28>;
    bindings = <&squ>;
    layers = <HD_NEU>;
  };
  // Combo U, O, and Y to produce Q, only on Hands Down Neu.
  combo_uoy_q {
    timeout-ms = <50>;
    key-positions = <26 27 28>;
    bindings = <&kp Q>;
    layers = <HD_NEU>;
  };
  // Combos for H digraphs in Hands Down Neu.
  combo_nt_th {
    timeout-ms = <50>;
    key-positions = <12 13>;
    bindings = <&sls T H>;
    layers = <HD_NEU>;
  };
  combo_sn_sh {
    timeout-ms = <50>;
    key-positions = <11 12>;
    bindings = <&sls S H>;
    layers = <HD_NEU>;
  };
  combo_st_ch {
    timeout-ms = <50>;
    key-positions = <11 13>;
    bindings = <&sls C H>;
    layers = <HD_NEU>;
  };
  combo_fp_wh {
    timeout-ms = <50>;
    key-positions = <1 3>;
    bindings = <&sls W H>;
    layers = <HD_NEU>;
  };
  combo_dg_gh {
    timeout-ms = <50>;
    key-positions = <23 24>;
    bindings = <&sls G H>;
    layers = <HD_NEU>;
  };
  combo_pm_ph {
    timeout-ms = <50>;
    key-positions = <2 3>;
    bindings = <&sls P H>;
    layers = <HD_NEU>;
  };
  // Leftmost two home row keys for ctrl.
  // Note that this prevents using Hands Down Neu's RS -> tab combo.
  combo_left_pinky_control {
    timeout-ms = <50>;
    key-positions = <10 11>;
    bindings = <&kp LCTRL>;
  };
  // Rightmost two top row keys for backspace.
  combo_right_pinky_backspace {
    timeout-ms = <50>;
    key-positions = <8 9>;
    bindings = <&kp BACKSPACE>;
  };
  // Leftmost two keys in bottom row for left shift.
  combo_left_pinky_shift {
    timeout-ms = <50>;
    key-positions = <20 21>;
    bindings = <&kp LSHFT>;
  };
  // Rightmost two keys in bottom row for right shift.
  combo_right_pinky_shift {
    timeout-ms = <50>;
    key-positions = <28 29>;
    bindings = <&kp RSHFT>;
  };
  // Left pinky and index for escape, as recommended by Hands Down Neu.
  combo_left_fork_escape {
    timeout-ms = <50>;
    key-positions = <10 13>;
    bindings = <&kp ESC>;
  };
  // Combos for clearing Bluetooth. Only available in keyboard
  // control layer.
  combo_bt_clear_all {
    timeout-ms = <50>;
    key-positions = <20 21 22 23>;
    bindings = <&bt BT_CLR_ALL>;
    layers = <KEEBCTL>;
  };
  combo_bt_clear_first {
    timeout-ms = <50>;
    key-positions = <20 31>;
    bindings = <&btclr 0>;
    layers = <KEEBCTL>;
  };
  combo_bt_clear_second {
    timeout-ms = <50>;
    key-positions = <21 31>;
    bindings = <&btclr 1>;
    layers = <KEEBCTL>;
  };
  combo_bt_clear_third {
    timeout-ms = <50>;
    key-positions = <22 31>;
    bindings = <&btclr 2>;
    layers = <KEEBCTL>;
  };
  combo_bt_clear_fourth {
    timeout-ms = <50>;
    key-positions = <23 31>;
    bindings = <&btclr 3>;
    layers = <KEEBCTL>;
  };
  combo_bt_clear_fifth {
    timeout-ms = <50>;
    key-positions = <24 31>;
    bindings = <&btclr 4>;
    layers = <KEEBCTL>;
  };
};

macros {
  // Select a specific Bluetooth profile and then toggle the
  // keyboard control layer; this is intended to deactivate that layer
  // when activated from within it.
  btsel: bluetooth_select_and_toggle {
    compatible = "zmk,behavior-macro-one-param";
    #binding-cells = <1>;
    bindings
      = <&macro_param_1to2>
      , <&bt BT_SEL MACRO_PLACEHOLDER>
      , <&macro_pause_for_release>
      , <&tog KEEBCTL>
      ;
  };
  // Clear a specific Bluetooth profile, relying on the &btsel macro to
  // toggle the layer.
  btclr: bluetooth_clear_and_toggle {
    compatible = "zmk,behavior-macro-one-param";
    #binding-cells = <1>;
    bindings
      = <&macro_param_1to1>
      , <&btsel MACRO_PLACEHOLDER>
      , <&bt BT_CLR>
      ;
  };
  // Type "qu" but force the "u" to be un-shifted. This ought to
  // result in "QU" when caps lock or caps-word is on, "Qu" when
  // shift is held normally, and "qu" when neither caps nor shift
  // is active. This variant nests the hold-tap inside it so that
  // the Q can be typed right away and then the U comes later.
  squh: sequence_q_lower_u_held {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    tap-ms = <LINGER_MACRO_TAP_MS>;
    wait-ms = <LINGER_MACRO_WAIT_MS>;
    bindings
      = <&kp Q>
      , <&macro_press   &linger_u UNUSED UNUSED>
      , <&macro_pause_for_release>
      , <&macro_release &linger_u UNUSED UNUSED>
      ;
  };
  // Type "qu" with unshifted U. This variant is a straightforward
  // two-tap macro that can be used pretty much anywhere, including as
  // the tap or the hold of a hold-tap.
  squ: sequence_q_lower_u_simple {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    tap-ms = <LINGER_MACRO_TAP_MS>;
    wait-ms = <LINGER_MACRO_WAIT_MS>;
    bindings = <&kp Q &weeu>;
  };
  // Type a digraph whose second letter is to be lowercase
  // regardless of shift. Note that this will remove shift even if
  // it is physically held beyond the end of the macro.
  sls: sequence_lower_second {
    compatible = "zmk,behavior-macro-two-param";
    #binding-cells = <2>;
    bindings
      = <&macro_param_1to1>
      , <&macro_tap &kp MACRO_PLACEHOLDER>
      , <&macro_release &kp LSHFT &kp RSHFT>
      , <&macro_param_2to1>
      , <&macro_tap &kp MACRO_PLACEHOLDER>
      ;
  };
  // Convert a hold to a tap. This is useful for linger keys that
  // should not be repeated on a hold, such as backspace in the
  // inverted Qu combo.
  h2t: hold_to_tap {
    compatible = "zmk,behavior-macro-one-param";
    #binding-cells = <1>;
    bindings = <&macro_param_1to1>, <&macro_tap &kp MACRO_PLACEHOLDER>;
  };
};

behaviors {
  tdjz: tap_dance_jz {
    compatible = "zmk,behavior-tap-dance";
    #binding-cells = <0>;
    bindings = <&kp J>, <&kp Z>;
  };
  tdgq: tap_dance_gq {
    compatible = "zmk,behavior-tap-dance";
    #binding-cells = <0>;
    bindings = <&kp G>, <&kp Q>;
  };
  // Positional home-row mods; uses fast tapping term
  hsl: homerow_mods_left {
    compatible = "zmk,behavior-hold-tap";
    #binding-cells = <2>;
    bindings = <&kp>, <&kp>;
    flavor = "balanced";
    tapping-term-ms = <HM_TAPPING_TERM_FAST>;
    quick-tap-ms = <HM_QUICK_TAP>;
    require-prior-idle-ms = <HM_PRIOR_IDLE>;
    hold-trigger-key-positions = <KEYS_RIGHT KEYS_THUMB>;
  };
  hsr: homerow_mods_right {
    compatible = "zmk,behavior-hold-tap";
    #binding-cells = <2>;
    bindings = <&kp>, <&kp>;
    flavor = "balanced";
    tapping-term-ms = <HM_TAPPING_TERM_FAST>;
    quick-tap-ms = <HM_QUICK_TAP>;
    require-prior-idle-ms = <HM_PRIOR_IDLE>;
    hold-trigger-key-positions = <KEYS_LEFT KEYS_THUMB>;
  };
  // Long duration sticky layer. I use this for KEEBCTL since I am
  // often slow at choosing a function there.
  slx: sticky_layer_extended {
    compatible = "zmk,behavior-sticky-key";
    #binding-cells = <1>;
    bindings = <&mo>;
    release-after-ms = <8000>;
  };
  // Morph for Qu pair. Conveniently this guards it from regular
  // shift, but not from caps-word.
  weeu: morph_small_u {
    compatible = "zmk,behavior-mod-morph";
    #binding-cells = <0>;
    bindings = <&kp U>, <&kp U>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
  };
  // Hold-tap for Qu linger: type unshifted U only if lingered.
  linger_u: linger_for_unshifted_u {
    compatible = "zmk,behavior-hold-tap";
    #binding-cells = <2>;
    flavor = "tap-preferred";
    tapping-term-ms = <LINGER_HOLD_SHORT_MS>;
    bindings = <&weeu>, <&none>;
  };
  // Tap to get Qu, hold to get a single key (expected to be Q).
  qut: linger_key_tap_qu {
    compatible = "zmk,behavior-hold-tap";
    #binding-cells = <2>;
    flavor = "tap-preferred";
    tapping-term-ms = <LINGER_HOLD_LONG_MS>;
    bindings = <&kp>, <&squ>;
  };
  // General hold-tap for linger keys. Totally ignores the tap part.
  lng: linger_key {
    compatible = "zmk,behavior-hold-tap";
    #binding-cells = <2>;
    flavor = "tap-preferred";
    tapping-term-ms = <LINGER_HOLD_SHORT_MS>;
    bindings = <&h2t>, <&none>;
  };
  // Layer tap variant that tries to guarantee the tap if the held
  // layer was not used.
  ltt: layer_tap_really_tap {
    compatible = "zmk,behavior-hold-tap";
    #binding-cells = <2>;
    flavor = "hold-preferred";
    tapping-term-ms = <LAYERTAP_HOLD_MS>;
    bindings = <&mo>, <&kp>;
  };
};

conditional_layers {
  compatible = "zmk,conditional-layers";
  numeric_momentary {
    if-layers = <SYM NAV>;
    then-layer = <NUMPAD>;
  };
  numeric_lock {
    if-layers = <NUMLOCK>;
    then-layer = <NUMPAD>;
  };
};

keymap {
  compatible = "zmk,keymap";

  hands_down_neu_layer {
// NB: Q and Z exist in combos: UY->Qu/Q (linger), WF->Z.
// ,-----------------------------.   ,-----------------------------.
// |  W  |  F  |  M  |  P  |  V  |   |  /  |  .  |  "  |  '  |  J  |
// |  R  |  S  |  N  |  T  |  B  |   |  ,  |  A  |  E  |  I  |  H  |
// |  X  |  C  |  L  |  D  |  G  |   |  -  |  U  |  O  |  Y  |  K  |
// `-----------| Esc | SYM |Sp/Sh|   | Spc | NAV | Bks |-----------'
    bindings = <
  &kp W  &kp F  &kp M  &kp P  &kp V    &kp FSLH  &kp DOT &kp DQT &kp SQT &kp J
  &kp R  &kp S  &kp N  &kp T  &kp B    &kp COMMA &kp A   &kp E   &kp I   &kp H
  &kp X  &kp C  &kp L  &kp D  &kp G    &kp MINUS &kp U   &kp O   &kp Y   &kp K
   &ltt I3WMNAV ESC  &mo SYM &mt LSHIFT SPACE    &kp SPACE &mo NAV &kp BSPC
    >;
  };

  hands_down_gold_layer {
// ,-----------------------------.   ,-----------------------------.
// | J z | G q |  M  |  P  |  V  |   |  ;  |  .  |  /  |  "  |  '  |
// |  R  |  S  |  N  |  D  |  B  |   |  ,  |  A  |  E  |  I  |  H  |
// |  X  |  F  |  L  |  C  |  W  |   |  -  |  U  |  O  |  Y  |  K  |
// `-----------| Esc | SYM |  T  |   |Sp/Sh| NAV | Bks |-----------'
    bindings = <
  &tdjz  &tdgq  &kp M  &kp P  &kp V    &kp SEMI  &kp DOT &kp FSLH &kp DQT &kp SQT
  &kp R  &kp S  &kp N  &kp D  &kp B    &kp COMMA &kp A   &kp E    &kp I   &kp H
  &kp X  &kp F  &kp L  &kp C  &kp W    &kp MINUS &kp U   &kp O    &kp Y   &kp K
              &kp ESC &mo SYM &kp T    &mt RSHIFT SPACE &mo NAV &kp BSPC
    >;
  };

  dvorak_layer {
// ,-----------------------------.   ,-----------------------------.
// |  '  |  ,  |  .  |  P  |  Y  |   |  F  |  G  |  C  |  R  |  L  |
// |  A  |  O  |  E  |  U  |  I  |   |  D  |  H  |  T  |  N  |  S  |
// |  ;  |  Q  |  J  |  K  |  X  |   |  B  |  M  |  W  |  V  |  Z  |
// `-----------| Esc | SYM |Sp/Sh|   | Spc | NAV | Bks |-----------'
    bindings = <
  &kp SQT  &kp COMMA &kp DOT &kp P  &kp Y    &kp F  &kp G  &kp C  &kp R  &kp L
  &kp A    &kp O     &kp E   &kp U  &kp I    &kp D  &kp H  &kp T  &kp N  &kp S
  &kp SEMI &kp Q     &kp J   &kp K  &kp X    &kp B  &kp M  &kp W  &kp V  &kp Z
         &kp ESC &mo SYM &mt LSHIFT SPACE    &kp SPACE &mo NAV &kp BSPC
    >;
  };

  colemakdh_layer {
// ,-----------------------------.   ,-----------------------------.
// |  Q  |  W  |  F  |  P  |  B  |   |  J  |  L  |  U  |  Y  |  '  |
// |  A  |  R  |  S  |  T  |  G  |   |  M  |  N  |  E  |  I  |  O  |
// |  Z  |  X  |  C  |  D  |  V  |   |  K  |  H  |  ,  |  .  |  /  |
// `-----------| Esc | SYM |Sp/Sh|   | Spc | NAV | Bks |-----------'
    bindings = <
  &kp Q  &kp W  &kp F  &kp P  &kp B    &kp J    &kp L   &kp U     &kp Y   &kp SQT
  &kp A  &kp R  &kp S  &kp T  &kp G    &kp M    &kp N   &kp E     &kp I   &kp O
  &kp Z  &kp X  &kp C  &kp D  &kp V    &kp K    &kp H   &kp COMMA &kp DOT &kp FSLH
   &kp ESC &mo SYM &mt LSHIFT SPACE    &kp SPACE &mo NAV &kp BSPC
    >;
  };

  qwerty_layer {
// ,-----------------------------.   ,-----------------------------.
// |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U  |  I  |  O  |  P  |
// |  A  |  S  |  D  |  F  |  G  |   |  H  |  J  |  K  |  L  |  ;  |
// |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M  |  ,  |  .  |  /  |
// `-----------| Esc | SYM |Sp/Sh|   | Spc | NAV | Bks |-----------'
    bindings = <
  &kp Q  &kp W  &kp E  &kp R  &kp T    &kp Y &kp U  &kp I     &kp O   &kp P
  &kp A  &kp S  &kp D  &kp F  &kp G    &kp H &kp J  &kp K     &kp L   &kp SEMI
  &kp Z  &kp X  &kp C  &kp V  &kp B    &kp N &kp M  &kp COMMA &kp DOT &kp FSLH
   &kp ESC &mo SYM &mt LSHIFT SPACE    &kp SPACE &mo NAV &kp BSPC
    >;
  };

  canary_layer {
// ,-----------------------------.   ,-----------------------------.
// |  W  |  L  |  Y  |  P  |  B  |   |  Z  |  F  |  O  |  U  |  '  |
// |  C  |  R  |  S  |  T  |  G  |   |  M  |  N  |  E  |  I  |  A  |
// |  Q  |  J  |  V  |  D  |  K  |   |  X  |  H  |  /  |  ,  |  .  |
// `-----------| Esc | SYM |Sp/Sh|   | Spc | NAV | Bks |-----------'
    bindings = <
  &kp W  &kp L  &kp Y  &kp P  &kp B    &kp Z  &kp F  &kp O    &kp U     &kp SQT
  &kp C  &kp R  &kp S  &kp T  &kp G    &kp M  &kp N  &kp E    &kp I     &kp A
  &kp Q  &kp J  &kp V  &kp D  &kp K    &kp X  &kp H  &kp FSLH &kp COMMA &kp DOT
   &kp ESC &mo SYM &mt LSHIFT SPACE    &kp SPACE &mo NAV &kp BSPC
    >;
  };

  sturdy_layer {
// ,-----------------------------.   ,-----------------------------.
// |  V  |  M  |  L  |  C  |  P  |   |  X  |  F  |  O  |  U  |  J  |
// |  S  |  T  |  R  |  D  |  Y  |   |  .  |  N  |  A  |  E  |  I  |
// |  Z  |  K  |  Q  |  G  |  W  |   |  B  |  H  |  '  |  ;  |  ,  |
// `-----------| Esc | SYM |Sp/Sh|   | Spc | NAV | Bks |-----------'
    bindings = <
  &kp V  &kp M  &kp L  &kp C  &kp P    &kp X   &kp F  &kp O   &kp U    &kp J
  &kp S  &kp T  &kp R  &kp D  &kp Y    &kp DOT &kp N  &kp A   &kp E    &kp I
  &kp Z  &kp K  &kp Q  &kp G  &kp W    &kp B   &kp H  &kp SQT &kp SEMI &kp COMMA
   &kp ESC &mo SYM &mt LSHIFT SPACE    &kp SPACE &mo NAV &kp BSPC
    >;
  };

  symbols_layer {
// ,-----------------------------.   ,-----------------------------.
// |  `  |  <  |  >  |  "  |  '  |   |  &  |  :  |  [  |  ]  |  _  |
// |  !  |  -  |  +  |  =  |  #  |   |  |  |  ;  |  {  |  }  |  ?  |
// |  ~  |  /  |  *  |  %  |  @  |   |  ^  |  $  |  (  |  )  |  /  |
// `-----------|     |#####|Rt/Sp|   | Ret | NUM |  \  |-----------'
    bindings = <
  &kp GRAVE &kp LT    &kp GT   &kp DQT     &kp SQT     &kp AMPS  &kp COLON  &kp LBKT &kp RBKT &kp UNDER
  &kp EXCL  &kp MINUS &kp PLUS &kp EQUAL   &kp HASH    &kp PIPE  &kp SEMI   &kp LBRC &kp RBRC &kp QMARK
  &kp TILDE &kp SLASH &kp STAR &kp PERCENT &kp AT      &kp CARET &kp DOLLAR &kp LPAR &kp RPAR &kp SLASH
                     &trans &trans &mt SPC LS(RET)    &kp RET &trans &kp BSLH
    >;
  };

  navigation_layer {
// ,-----------------------------.   ,-----------------------------.
// | ^Q  | ^W  | ^E  | ^R  | ^T  |   | Hom | PgD | Up  | PgU | Esc |
// | ^A  | ^S  | ^D  | ^F  | ^G  |   | End | Left| Down|Right| Bks |
// | ^Z  | ^X  | ^C  | ^V  | Del |   | GUI | Ctrl|Shift| Alt | Tab |
// `-----------|XXXXX| NUM | Bks |   | Ret |#####| Ins |-----------'
    bindings = <
  &kp LC(Q) &kp LC(W) &kp LC(E) &kp LC(R)  &kp LC(T)     &kp HOME &kp PG_DN &kp UP     &kp PG_UP &kp ESC
  &kp LC(A) &kp LC(S) &kp LC(D) &kp LC(F)  &kp LC(G)     &kp END  &kp LEFT  &kp DOWN   &kp RIGHT &kp BSPC
  &kp LC(Z) &kp LC(X) &kp LC(C) &kp LC(V)  &kp DEL       &sk RGUI &sk RCTRL &sk RSHIFT &sk LALT  &kp TAB
                   &none &trans &kp LC(BSPC)   &kp RET &trans &kp INS
    >;
  };

  numpad_layer {
// ,-----------------------------.   ,------------------------------.
// | F1  | F2  | F3  | F4  |NumLk|   |  *  |  7  |  8  |  9  |  -  |
// | F5  | F6  | F7  | F8  | Bks |   |  /  |  4  |  5  |  6  |  +  |
// | F9  | F10 | F11 | F12 | Del |   |  0  |  1  |  2  |  3  | Ent |
// `-----------|     |#####| Spc |   |  :  |#####|  .  |-----------'
    bindings = <
  &kp F1 &kp F2  &kp F3  &kp F4  &tog NUMLOCK    &kp KP_MULTIPLY &kp N7 &kp N8 &kp N9 &kp KP_SUBTRACT
  &kp F5 &kp F6  &kp F7  &kp F8  &kp BSPC        &kp KP_DIVIDE   &kp N4 &kp N5 &kp N6 &kp KP_PLUS
  &kp F9 &kp F10 &kp F11 &kp F12 &kp DEL         &kp N0          &kp N1 &kp N2 &kp N3 &kp ENTER
                      &trans &trans &kp SPACE    &kp COLON &trans &kp DOT
    >;
  };

  num_lock_layer {
// Only exists to toggle numpad layer lock on and off.
    bindings = <
  &trans &trans &trans &trans &trans    &trans &trans &trans &trans &trans
  &trans &trans &trans &trans &trans    &trans &trans &trans &trans &trans
  &trans &trans &trans &trans &trans    &trans &trans &trans &trans &trans
                &trans &trans &trans    &trans &trans &trans
    >;
  };

  tiling_nav_layer {
// ,-----------------------------.   ,------------------------------.
// |     |     |     |     |     |   |     |     |     |     |     |
// | WS1 | WS2 | WS3 | WS4 | WS5 |   | WS6 | WS7 | WS8 | WS9 | WS10|
// |     |     |     |     |     |   |     |     |     |     |     |
// `-----------|#####|     |     |   |     |     |     |-----------'
    bindings = <
  &trans     &trans     &trans     &trans     &trans        &trans     &trans     &trans     &trans     &trans
  &kp LG(N1) &kp LG(N2) &kp LG(N3) &kp LG(N4) &kp LG(N5)    &kp LG(N6) &kp LG(N7) &kp LG(N8) &kp LG(N9) &kp LG(N0)
  &trans     &trans     &trans     &trans     &trans        &trans     &trans     &trans     &trans     &trans
                                  &trans &trans &trans    &trans &trans &trans
    >;
  };

  keyboard_control_layer {
// ,-----------------------------.   ,-----------------------------.
// |     |HDNeu|Dvork|Clmak|     |   |     |     |     |     |     |
// |QWRTY|HDGld|STRDY|Cnary|     |   |     |     |     |     |     |
// | BT1 | BT2 | BT3 | BT4 | BT5 |   |     |     |     |     |     |
// `-----------|#####|XXXXX| BAS |   |     |     |#####|-----------'

    bindings = <
  &trans     &to HD_NEU  &to DVORAK &to COLEMAK &trans          &trans &trans &trans &trans &trans
  &to QWERTY &to HD_GOLD &to STURDY &to CANARY  &trans          &trans &trans &trans &trans &trans
  &btsel 0   &btsel 1    &btsel 2   &btsel 3    &btsel 4        &trans &trans &trans &trans &trans
                                 &trans &none &tog KEEBCTL    &trans &trans &trans
    >;
  };
};
// end keymap
};
